<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	<description>shiro</description>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

    <!-- realm -->
    <bean id="userRealm" class="cn.flame.oms.common.security.UserRealm">
        <!-- 用切面缓存代理了 此处就不缓存了 -->
        <!-- 可配置cache token<->认证信息的cache，用于REST等需要频繁认证的场景 -->
        <!-- <property name="authenticationCachingEnabled" value="false"/> -->
        <!-- <property name="authorizationCachingEnabled" value="false"/> -->
    </bean>

    <!---cookie-->
    <!-- uid(session id) 生成策略 -->
    <!-- <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/> -->

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.rememeberMe.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}"/>
    </bean>

    <!--dao -->
    <!-- 会话保持的DAO -->
    <!-- <bean id="onlineSessionDAO" class="cn.flame.oms.common.security.repository.OnlineSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="activeSessionsCacheName" value="${shiro.active.session.cacheName}"/>
    </bean> -->

    <!-- <bean id="onlineSessionFactory" class="cn.flame.oms.common.security.OnlineSessionFactory"/> -->

    <!-- manager -->
    <!-- Remembered vs Authenticated http://www.ituring.com.cn/article/287 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('${shiro.uid.rememeberMe.cookie.base64.cipherKey}')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="userRealm"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- filter -->
    <!--替换默认的form 验证过滤器-->
    <bean id="formAuthenticationFilter" class="cn.flame.oms.web.filter.CustomFormAuthenticationFilter">
    	<property name="successUrl" value="${shiro.default.success.url}"/>
        <!-- <property name="defaultSuccessUrl" value="${shiro.default.success.url}"/> -->
        <!-- <property name="adminDefaultSuccessUrl" value="${shiro.admin.default.success.url}"/> -->
        <!-- 表单上的用户名/密码 下次自动登录的参数名 -->
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>

    <!-- 退出登录过滤器 -->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${shiro.logout.success.url}"/>
    </bean>

    <!--提取系统用户（User） 验证用户是否合法的过滤器（如是否删除了 是否锁定了） -->
    <bean id="sysUserFilter" class="cn.flame.oms.web.filter.SysUserFilter">
        <property name="userBlockedUrl" value="${shiro.user.blocked.url}"/>
        <property name="userNotfoundUrl" value="${shiro.user.notfound.url}"/>
        <property name="userUnknownErrorUrl" value="${shiro.user.unknown.error.url}"/>
    </bean>

    <!-- 验证会话是否是强制退出等的filter -->
    <!-- <bean id="onlineSessionFilter" class="org.apache.shiro.web.filter.online.OnlineSessionFilter">
        <property name="forceLogoutUrl" value="${shiro.user.force.logout.url}"/>
        <property name="onlineSessionDAO" ref="onlineSessionDAO"/>
    </bean> -->

	<bean id="kaptchaFilter" class="cn.flame.oms.web.filter.KaptchaFilter" />

	<!-- Kaptcha验证码生成器 -->
	<!-- 相对简单实用的一个图片生成工具，但我没找到作者的文档，但可以Google到一些配置说明 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<!-- Kaptcha 相关配置 -->
	    <property name="config">
	        <bean class="com.google.code.kaptcha.util.Config">
	            <constructor-arg>
	                <props>
	                    <prop key="kaptcha.border">yes</prop>
	                    <prop key="kaptcha.border.color">105,179,90</prop>
	                    <prop key="kaptcha.textproducer.font.color">blue</prop>
	                    <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
	                    <prop key="kaptcha.image.width">125</prop>
	                    <prop key="kaptcha.image.height">45</prop>
	                    <prop key="kaptcha.textproducer.font.size">45</prop>
	                    <prop key="kaptcha.session.key">code</prop>
	                    <prop key="kaptcha.textproducer.char.length">4</prop>
	                    <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
	                </props>
	            </constructor-arg>
	        </bean>
	    </property>
	</bean>

	<bean id="kaptchaValidateFilter" class="cn.flame.oms.web.filter.KaptchaValidateFilter">
		<property name="kaptchaEnabled" value="${shiro.kaptcha.enable}"/>
		<property name="kaptchaParam" value="kaptchaCode"/>
		<property name="kaptchaErrorUrl" value="${shiro.kaptcha.error.url}"/>
	</bean>

    <!-- 同步当前会话数据到数据库 -->
    <!-- <bean id="syncOnlineSessionFilter" class="cn.flame.oms.web.SyncOnlineSessionFilter">
        <property name="onlineSessionDAO" ref="onlineSessionDAO"/>
    </bean> -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:-->
        <property name="loginUrl" value="${shiro.login.url}"/>
        <property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
                <!-- <entry key="onlineSession" value-ref="onlineSessionFilter"/> -->
                <!-- <entry key="syncOnlineSession" value-ref="syncOnlineSessionFilter"/> -->
                <entry key="kaptchaValidate" value-ref="kaptchaValidateFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /static/** = anon
                /kaptcha* = anon
                /logout = logout
                /login = kaptchaValidate,authc
                <!-- /** = sysUser,onlineSession,user,syncOnlineSession,perms,roles -->
                /** = sysUser,user,perms,roles
            </value>
        </property>
    </bean>

    <!-- aop and other-->
    <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
    <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
    <!-- applications - see the 'Web Applications' section below instead.                 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>