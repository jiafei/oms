<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
			http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<description>DataAccess</description>
	<!-- 数据源定义：1、使用Druid 连接池 -->
	<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.connection.url}" />
		<property name="username" value="${jdbc.connection.username}" />
		<property name="password" value="${jdbc.connection.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- 数据源定义：2、使用Apache DBCP 连接池 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="${jdbc.connection.driver_class}" 
		/> <property name="url" value="${jdbc.connection.url}" /> <property name="username" 
		value="${jdbc.connection.username}" /> <property name="password" value="${jdbc.connection.password}" 
		/> </bean> -->

	<!-- 数据源定义：3、使用 c3p0 连接池 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> <property name="driverClass" value="${jdbc.connection.driver_class}" 
		/> <property name="jdbcUrl" value="${jdbc.connection.url}" /> <property name="user" 
		value="${jdbc.connection.username}" /> <property name="password" value="${jdbc.connection.password}" 
		/> <property name="maxPoolSize" value="3"></property> <property name="minPoolSize" 
		value="1"></property> <property name="initialPoolSize" value="2"></property> 
		<property name="maxIdleTime" value="20"></property> <property name="testConnectionOnCheckin" 
		value="true" /> <property name="idleConnectionTestPeriod" value="60" /> </bean> -->

	<!-- jpa Entity Factory 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="cn.flame.**.entity" />
		<property name="persistenceProvider">
			<bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="${jpa.generateDdl}" />
				<property name="showSql" value="${jpa.showSql}" />
				<property name="database" value="${jpa.database}" />
				<property name="databasePlatform" value="${jpa.databasePlatform}" />
			</bean>
		</property>
		<!-- <property name="jpaDialect"> <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" 
			/> </property> -->
		<!-- <property name="jpaProperties">
			<props>
				<prop key="hibernate.physical_naming_strategy">${hibernate.physical_naming_strategy}</prop>
			</props>
		</property> -->
		<property name="jpaPropertyMap">
			<map>
				<!-- 使用自定义的validator进行jsr303验证 -->
				<!-- <entry key="javax.persistence.validation.factory" value-ref="validator" /> -->
				<!-- jsr303验证模式 因为其要么验证 要么不验证 不能按照规则走 所以此处禁用 -->
				<!-- #http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html -->
				<!-- <entry key="javax.persistence.validation.mode" value="NONE" /> -->
				<!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
				<!-- <entry key="hibernate.archive.autodetection" value="class" /> -->
				<!-- 不检查@NamedQuery -->
				<!-- <entry key="hibernate.query.startup_check" value="false" /> -->
				<entry key="hibernate.physical_naming_strategy" value="${hibernate.physical_naming_strategy}" />
				<entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}" />
				<entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}" />
				<entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}" />
				<entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}" />
				<entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}" />
				<entry key="hibernate.cache.region.factory_class" value="${hibernate.cache.region.factory_class}" />
				<entry key="net.sf.ehcache.configurationResourceName" value="${net.sf.ehcache.configurationResourceName}" />
				<entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}" />
			</map>
		</property>
	</bean>

	<!--事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 声明式事务：1、@Transactional注解方式 -->
	<!-- 注意：优点是使用简单，缺点是Service里“自我调用”方法导致的事务增强失效等问题难以解决，这种情况需要定义不同的类来解决 http://jinnianshilongnian.iteye.com/blog/1487235 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 声明式事务：2、advice方式 -->
	<!-- 注意：必须根据方法命名约定进行编程，另外可使用：((IXxxService)AopContext.currentProxy()).otherMethod()，这种方式解决“自我调用”的问题 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 一般的增删改，使用REQUIRED -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />

			<!-- 需要新开事务，使用REQUIRES_NEW -->
			<!-- <tx:method name="reqNew*" propagation="REQUIRES_NEW" /> -->

			<!-- 一般的查询，使用SUPPORTS -->
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<!-- 默认 -->
			<tx:method name="login" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!--设置RepositoryHelper辅助类所需的entityManagerFactory -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="cn.flame.oms.common.repository.RepositoryHelper.setEntityManagerFactory" />
		<property name="arguments" ref="entityManagerFactory" />
	</bean>

	<aop:config expose-proxy="true" proxy-target-class="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut"
			expression="execution(* cn.flame..service..*+.*(..))" />
		<aop:advisor id="txAdvisor" advice-ref="txAdvice"
			pointcut-ref="txPointcut" />
	</aop:config>

	<jpa:repositories base-package="cn.flame.**.repository"
		factory-class="cn.flame.oms.common.repository.support.SimpleBaseRepositoryFactoryBean">
	</jpa:repositories>
</beans>